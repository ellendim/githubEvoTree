---
title: "Upset plots and gene tables"
author: "Ellen Dimmen Chapple"
date: "2023-08-25"
output: 
  html_document:
    code_folding: hide
    toc: true
    number_sections: true
    toc_float: true
    theme: lumen
editor_options:
  chunk_output_type: console
---



```{r message=FALSE, warning=FALSE}

library(dplyr)
library(tidyverse)
library(gdata)
library(UpSetR)
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggthemes)
library(formattable)
library(DT)

```


```{r}

ortholog_group_file <- read.delim("Data/DATA/Orthogroups.100323.tsv", header = TRUE, sep = "\t")

species_list <- c("Lodge", "Asp", "Nor","Scots","Birch","Cher")
combo <- data.frame(t(combn(species_list, 2)))

file_list_1 <- c()
for (i in 1:nrow(combo)){
  
  s1 <- combo[i, "X1"]
  s2 <- combo[i, "X2"]
  
  file_name <- paste0("Data/DATA/comparisonFiles/comparison-",s1,"_",s2,"-pearsonMR0.03no-table.RData")
  file_list_1 <- append(file_list_1, file_name, after = length(file_list_1))
    
}

file_list_2 <- c()
for (i in species_list){
  
  expr_name <- paste0("Data/DATA/transcriptomicsData/",i,"Wood_transcriptomics.txt")
  file_list_2 <- append(file_list_2, expr_name, after = length(file_list_2))
    
}

```



```{r message=FALSE, warning=FALSE}

ortho_general_filtering <- ortholog_group_file %>%
    mutate(Pinsyl.SHORT.cp.pep = Pinsyl.SHORT.pep) %>% 
    rename(
      Asp = Poptre.SHORT.pep,
      Birch = Betpen.SHORT.pep,
      Nor = Picabi.SHORT.pep,
      Scots = Pinsyl.SHORT.pep,
      Cher = Prunavi.SHORT.pep,
      Lodge = Pinsyl.SHORT.cp.pep,
      OrthoGroup = Orthogroup) %>% 
    mutate(Asp = gsub("Poptre_", "", Asp)) %>%
    mutate(Birch = gsub("Betpen_", "", Birch)) %>%
    mutate(Cher = gsub("Prunavi_", "", Cher)) %>% 
    select(OrthoGroup, species_list)

  




```


# Making upset plot for all possible ortholog groups 

```{r}
# Individual species

ortho_seq_all <- ortho_general_filtering 

rownames(ortho_seq_all) <- ortho_seq_all$OrthoGroup
ortho_seq_all <- ortho_seq_all %>% 
  select(-(1)) 
  

ortho_seq_all[ortho_seq_all == ""] <-0
ortho_seq_all[ortho_seq_all != 0] <-1

ortho_seq_all <- ortho_seq_all %>% 
  mutate_if(is.character, as.integer)


col_order_singles <- c( "Asp", "Birch", "Cher", "Nor", "Scots", "Lodge")

```


```{r message=FALSE, warning=FALSE}
# Pair-wise

ortho_seq_pairs <- ortho_seq_all


for (x in file_list_1){
  if (file.exists(x)){ 
    
    
       
    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1)
    
    
    pair_df <- ortho_seq_pairs %>% 
      select(c(key_word_s1, key_word_s2)) %>% 
      mutate(newCol = rowSums(. [1:2])) %>% 
      select(newCol)

    pair_df[pair_df < 2] <- 0
    pair_df[pair_df != 0] <-1 
    
    col_renamed <- as.character(paste0(key_word_s1, "-", key_word_s2))
    
    colnames(pair_df)[1] = col_renamed
    
    ortho_seq_pairs <- cbind(ortho_seq_pairs, pair_df)
    
    }}

ortho_seq_pairs <- ortho_seq_pairs %>% 
  select(-c(1:6)) %>% 
  mutate_if(is.numeric, as.integer)


```







# Making an Upset plot for all co-expressed/expressed genes

Comment: for Asp there are some genes in the expression table that are not included in the ortholog-group-file.

```{r message=FALSE, warning=FALSE}
# Expressed only



expr_pairs <- ortho_general_filtering 

for (i in col_order_singles){
  

  
  file <- paste0("Data/DATA/transcriptomicsData/",i,"Wood_transcriptomics.txt")
  expression_data <- read.delim(file,sep = "\t", header = TRUE)
  

  
  filtered_genes <- ortho_general_filtering %>% #all possible orthologs for species
    separate_rows(i, sep = ", ") %>% 
    select(OrthoGroup, i) %>% 
    rename(species = i)
  
    
    
    if(i == "Asp"){
      filtered_genes <- filtered_genes %>% 
        mutate(species = gsub("\\.\\d\\.p\\d$", "", species))
      
    }
 
  if(i == "Nor"){
    
    filtered_genes <- filtered_genes %>% 
      mutate(species = gsub("\\.p\\d$", "", species))
  }
  
  
  if(i == "Cher"){
    
    filtered_genes <- filtered_genes %>% 
      mutate(species = gsub("\\.p\\d$", "", species))
  }
  
  genes_without_ortho <- expression_data %>% 
      filter(!(Genes %in% filtered_genes$species))
  print(paste0("Number of genes in the expression data not listed in ortholog-group-file: ", dim(genes_without_ortho)[1], " ~ ", round((dim(genes_without_ortho)[1]/nrow(expression_data))*100,3), "%" ))
  
  filtered_genes <- filtered_genes %>% 
    filter(species %in% expression_data$Genes) %>% 
    group_by(OrthoGroup) %>% 
    slice(1)
  
  

    
  species_col <- expr_pairs %>% 
    left_join( filtered_genes,join_by(OrthoGroup == OrthoGroup)) %>%
      select(species)
  
  col_renamed <- as.character(paste0(i, "-expr"))
  colnames(species_col) = col_renamed  
    # print(paste0("Length after joining: ",nrow(new_column)))

    expr_pairs <- cbind(expr_pairs, species_col)
  
}

expr_pairs <- expr_pairs[, -c(1:7)]
expr_pairs[is.na(expr_pairs)] <- 0
expr_pairs[expr_pairs != 0] <-1

expr_pairs <- expr_pairs %>% 
  mutate_if(is.character, as.integer)

```



```{r message=FALSE, warning=FALSE}
# Co-expressed (not p-value filtered)

comparison_pval <- data.frame(
  index = c(),
  corr_pair = c(),
  max_pval = c()
)

ones_and_zeros_all <- ortho_general_filtering 


for (x in file_list_1){
  if (file.exists(x)){ 
    load(x) 
    
    # Filter the comparison tables to just contain one gene pair for each ortholog group. 
    
    p_val_all <- comparison_table%>%
      select(Species1, Species2, OrthoGroup, Max.p.val) %>%
      mutate_at("Max.p.val", as.numeric) %>%
      # filter(Max.p.val< 0.05) %>%  # only p-values under ...
      group_by(OrthoGroup) %>%
      arrange(Max.p.val) %>% 
      slice(1) 
    # ungroup() %>%
    # distinct(Species1,  .keep_all = T) %>%
    # distinct( Species2, .keep_all = T) %>%
    # arrange(Max.p.val)
    
    comparison_pval <- rbind(comparison_pval, data.frame(
      index = 1:nrow(comparison_table),
      corr_pair = paste0(key_word_s1, "-", key_word_s2),
      max_pval = comparison_table$Max.p.val
      
    ))
    
    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1)
    
    # print(paste0("---------------- ", key_word_s1, "-", key_word_s2, " ----------------" ))
    # print(paste0("Number of non-unique ortholog groups: ", nrow(p_val)-length(unique(p_val$OrthoGroup)))) 
    # print(paste0("S1 duplicates: ", nrow(p_val)-length(unique(p_val$Species1)), " S2 duplicates: ",nrow(p_val)-length(unique(p_val$Species2)) ))
    
    new_col_name <-as.character(paste0(key_word_s1, "-", key_word_s2))
    
    
    
    # Rename one of the columns
    colnames(p_val_all)[1] = new_col_name
    
    p_val_all <- p_val_all %>%
      select(-c(Species2, Max.p.val))
    
    # Make a new column the same length as all the original ortholog data containing 'all possible' ortholog groups
    new_column <- ones_and_zeros_all %>%
      left_join(p_val_all, join_by(OrthoGroup == OrthoGroup)) %>%
      select(new_col_name)
    
    # print(paste0("Length after joining: ",nrow(new_column)))
    
    ones_and_zeros_all <- cbind(ones_and_zeros_all, new_column)
    
    
    
  }}

    
rownames(ones_and_zeros_all) <- ones_and_zeros_all$OrthoGroup
ones_and_zeros_all <- ones_and_zeros_all[,-c(1:7)]

# Create 0 where there are NAs, and 1's where there are no "0"'s
ones_and_zeros_all[is.na(ones_and_zeros_all)] <- 0
ones_and_zeros_all[ones_and_zeros_all != 0] <-1

ones_and_zeros_all <- ones_and_zeros_all %>%
   mutate_if(is.character, as.integer)

# Specify the order we want the output
col_order <- c(  "Asp-Birch",  "Asp-Cher", "Birch-Cher",  "Lodge-Asp", "Lodge-Birch", "Lodge-Cher",  "Asp-Nor","Nor-Birch", "Nor-Cher", "Scots-Birch", "Scots-Cher",  "Asp-Scots" ,  "Lodge-Scots", "Lodge-Nor", "Nor-Scots")

ones_and_zeros_all<- ones_and_zeros_all[, col_order]

```



```{r message=FALSE, warning=FALSE}
# Co-expressed, and significant

ones_and_zeros <- ortho_general_filtering 


for (x in file_list_1){
  if (file.exists(x)){ 
    load(x) 
    
    # Filter the comparison tables to just contain one gene pair for each ortholog group. 
    
    p_val <- comparison_table%>%
    select(Species1, Species2, OrthoGroup, Max.p.val) %>%
    mutate_at("Max.p.val", as.numeric) %>%
    filter(Max.p.val< 0.05) %>%  # only p-values under ...
    group_by(OrthoGroup) %>%
    arrange(Max.p.val) %>% 
    slice(1) 
    # ungroup() %>%
    # distinct(Species1,  .keep_all = T) %>%
    # distinct( Species2, .keep_all = T) %>%
    # arrange(Max.p.val)
    

    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1)
    
    # print(paste0("---------------- ", key_word_s1, "-", key_word_s2, " ----------------" ))
    # print(paste0("Number of non-unique ortholog groups: ", nrow(p_val)-length(unique(p_val$OrthoGroup)))) 
    # print(paste0("S1 duplicates: ", nrow(p_val)-length(unique(p_val$Species1)), " S2 duplicates: ",nrow(p_val)-length(unique(p_val$Species2)) ))
    
    new_col_name <-as.character(paste0(key_word_s1, "-", key_word_s2))
    


    # Rename one of the columns
    colnames(p_val)[1] = new_col_name

    p_val <- p_val %>%
      select(-c(Species2, Max.p.val))

    # Make a new column the same length as all the original ortholog data containing 'all possible' ortholog groups
    new_column <- ones_and_zeros %>%
      left_join(p_val, join_by(OrthoGroup == OrthoGroup)) %>%
      select(new_col_name)

    # print(paste0("Length after joining: ",nrow(new_column)))

    ones_and_zeros <- cbind(ones_and_zeros, new_column)
    

    
    }}

    
rownames(ones_and_zeros) <- ones_and_zeros$OrthoGroup
ones_and_zeros <- ones_and_zeros[,-c(1:7)]

# Create 0 where there are NAs, and 1's where there are no "0"'s
ones_and_zeros[is.na(ones_and_zeros)] <- 0
ones_and_zeros[ones_and_zeros != 0] <-1

ones_and_zeros <- ones_and_zeros %>%
   mutate_if(is.character, as.integer)

# Specify the order we want the output
col_order <- c(  "Asp-Birch",  "Asp-Cher", "Birch-Cher",  "Lodge-Asp", "Lodge-Birch", "Lodge-Cher",  "Asp-Nor","Nor-Birch", "Nor-Cher", "Scots-Birch", "Scots-Cher",  "Asp-Scots" ,  "Lodge-Scots", "Lodge-Nor", "Nor-Scots")


ones_and_zeros<- ones_and_zeros[, col_order]


```



# Plotting

**All possible orthologs - per species**

Based on sequence...all orthologs we "have"... not expressed genes.

```{r fig.dim = c(15, 10)}
# Plot upset plot. Using sets = rev(col_order) gives set order from top to bottom. Remember keep.order = T - if not the set order will be sorted by set size.

upset(ortho_seq_all, 
      sets = rev(col_order_singles),
      nintersects = 20, 
      keep.order = T, 
      order.by = "freq",decreasing = T,
      set_size.show = T,
      text.scale = 1.5,
      set_size.scale_max = 17000
      )



```

**All possible orthologs - per pairs**

```{r fig.dim = c(15, 10)}
# Plot upset plot. Using sets = rev(col_order) gives set order from top to bottom. Remember keep.order = T - if not the set order will be sorted by set size.

upset(ortho_seq_pairs, 
      sets = rev(col_order),
      nintersects = 20, 
      keep.order = T, 
      order.by = "freq",decreasing = T,
      set_size.show = T,
      text.scale = 1.5,
      set_size.scale_max = 17000
      )



```

**All expressed genes - per species**

1) not all expressed genes are in the ortholog-group-file.
2) Only one gene per ortholog group was used.

```{r fig.dim = c(15, 10)}
# Plot upset plot. Using sets = rev(col_order) gives set order from top to bottom. Remember keep.order = T - if not the set order will be sorted by set size.

upset(expr_pairs, 
      nsets = 6,
      nintersects = 20, 
      keep.order = T, 
      order.by = "freq",decreasing = T,
      set_size.show = T,
      text.scale = 1.5,
      set_size.scale_max = 17000
      )



```




**All co-expressed genes - no p-value filtering**

```{r fig.dim = c(15, 10)}
# Plot upset plot. Using sets = rev(col_order) gives set order from top to bottom. Remember keep.order = T - if not the set order will be sorted by set size.

upset(ones_and_zeros_all, 
      sets =  rev(col_order),
      nintersects = 50,
      keep.order = T, 
      order.by = "freq",decreasing = T,
      set_size.show = T,
      text.scale = 1.5,
      set_size.scale_max = 10000)

```

**Co-expressed genes - p-value < 0.05**

```{r fig.dim = c(15, 10)}
# Plot upset plot. Using sets = rev(col_order) gives set order from top to bottom. Remember keep.order = T - if not the set order will be sorted by set size.
upset(ones_and_zeros, 
      sets =  rev(col_order),
 
      nintersects = 50,
      keep.order = T, 
      order.by = "freq",decreasing = T,
      set_size.show = T,
      text.scale = 1.5,
      set_size.scale_max = 7000)

```


```{r}

comparison_pval <- comparison_pval %>%
  mutate_at("max_pval", as.numeric) %>% 
  group_by(corr_pair)

ggplot(comparison_pval,aes(x=max_pval, color=corr_pair, fill=corr_pair)) +
    geom_histogram(alpha=0.6, bins = 4) +
    scale_fill_viridis(discrete=TRUE) +
    scale_color_viridis(discrete=TRUE) +
    
    theme(
      legend.position="none",
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 8)
    ) +
    xlab("Max p-value") +
    ylab("Number of genes") +
    facet_wrap(~corr_pair)


pval_plot_2 <-ggplot(comparison_pval ,aes(x=index, y=max_pval, group=corr_pair, color=corr_pair)) +
    geom_line(linewidth = 1) +
    scale_color_manual(values = c(rainbow(15))) +
    ggtitle("Dist. of max p-values - unfiltered") +
    ylab("Max p-value") +
  xlim(-0.5, 20000) +
    theme(
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 20)
  )


pval_plot_2


```



# Definitions of 'conserved'


*Complete sets*

```{r}


df_with_sums <- ones_and_zeros %>% 
  mutate(Angiosperms = rowSums(. [1:3])) %>% 
  mutate(Between = rowSums(. [4:12]))%>%  
  mutate(Gymnosperms = rowSums(. [13:15])) %>% 
  mutate(Conserved = rowSums(. [1:15]))


# Angiosperms - converting to 1's and 0's based on the value in the sum column, AND if the sum in the two other columns is = 0.
# 1) Need to filter out the rows where Conserved and Gymnosperms != 0. Do this in separate data frame as we need df_with_sum for later.

angios_strict <- df_with_sums %>% 
  filter(Between == 0) %>% 
  filter(Gymnosperms == 0)

# 2) Now we can add the 1's and 0's.
angios_strict$Angiosperms[angios_strict$Angiosperms < 3] <- 0 # 1 and 2 are changed to 0.
angios_strict$Angiosperms[angios_strict$Angiosperms == 3] <- 1 # 3 is changed to 1.



# Now the same for gymnosperms.

gymnos_strict<- df_with_sums %>% 
  filter(Between == 0) %>% 
  filter(Angiosperms == 0)

gymnos_strict$Gymnosperms[gymnos_strict$Gymnosperms < 3] <- 0 # 1 and 2 are changed to 0.
gymnos_strict$Gymnosperms[gymnos_strict$Gymnosperms == 3] <- 1 # 3 is changed to 1.



# Finally, for the conserved. Now we need to change the threshold!

conserved_strict <- df_with_sums %>% 
  filter(Angiosperms == 3) %>% 
  filter(Gymnosperms == 3) 

conserved_strict$Conserved[conserved_strict$Conserved < 15] <- 0 # 1->9 are changed to 0.
conserved_strict$Conserved[conserved_strict$Conserved == 15] <- 1 # 9 is changed to 1.



```



```{r}
# The summary data frame contains the number of genes/ortholog groups that are completely present in each species group. That means
# that there needs to be a n/n score for each gene for it to be included, where n = number of species in the species group.

summary_df <- data.frame(
  Definition = c(),
  Group = c(),
  Counts = c()
)


summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Strict", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_strict$Angiosperms),sum(conserved_strict$Conserved), sum(gymnos_strict$Gymnosperms))
  ))  

```


*Partial set 1*

```{r}
# Use the strict data frames for the clades.

# For the conserved groups we require complete clades, but allow only partial overlap of between-pairs.

conserved_partial_1 <- df_with_sums %>% 
  filter(Angiosperms >= 3) %>% 
  filter(Gymnosperms >= 3) 

conserved_partial_1$Conserved[conserved_partial_1$Conserved < 8] <- 0 # 1->9 are changed to 0.
conserved_partial_1$Conserved[conserved_partial_1$Conserved >= 8] <- 1 # 9 is changed to 1.



```



```{r}



summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Partial 1", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_strict$Angiosperms),sum(conserved_partial_1$Conserved), sum(gymnos_strict$Gymnosperms))
  ))  


```


*Partial sets 2*

```{r}

# Use the strict data frames for the clades.

# Same as for partial 1, but with require 5/9 pair-genes.


conserved_partial_2 <- df_with_sums %>% 
  filter(Angiosperms >= 3) %>% 
  filter(Gymnosperms >= 3) %>% 
  filter(Between >= 5)

conserved_partial_2$Conserved[conserved_partial_2$Conserved < 11] <- 0 # 1->9 are changed to 0.
conserved_partial_2$Conserved[conserved_partial_2$Conserved >= 11] <- 1 # 9 is changed to 1.



```



```{r}

summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Partial 2", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_strict$Angiosperms),sum(conserved_partial_2$Conserved), sum(gymnos_strict$Gymnosperms))
  ))  

```


*Partial sets 3*

```{r}

# Now we allow 2/3 pairs for clades, but still require pure clades.

# Angiosperms
angios_partial_1 <- df_with_sums %>% 
  filter(Between == 0) %>% 
  filter(Gymnosperms == 0) 

# 2) Now we can add the 1's and 0's.
angios_partial_1$Angiosperms[angios_partial_1$Angiosperms < 2] <- 0 # 1 and 2 are changed to 0.
angios_partial_1$Angiosperms[angios_partial_1$Angiosperms >= 2] <- 1 # over 2 is changed to 1.



# Gymnosperms
gymnos_partial_1 <- df_with_sums %>% 
  filter(Angiosperms == 0) %>% 
  filter(Between == 0)

# 2) Now we can add the 1's and 0's.
gymnos_partial_1$Gymnosperms[gymnos_partial_1$Gymnosperms < 2] <- 0 # Even though we allow max 3 pairs between, we still want full clades.
gymnos_partial_1$Gymnosperms[gymnos_partial_1$Gymnosperms >= 2] <- 1 # over 2 is changed to 1.



# For the conserved groups we allow 1) 2/3 for clades, and 2) 2/9 for between pairs.

conserved_partial_3 <- df_with_sums %>% 
  filter(Angiosperms >= 2) %>% 
  filter(Gymnosperms >= 2) %>% 
  filter(Between >=2)

conserved_partial_3$Conserved[conserved_partial_3$Conserved < 6] <- 0 # 1->9 are changed to 0.
conserved_partial_3$Conserved[conserved_partial_3$Conserved >= 6] <- 1 # 9 is changed to 1.


```



```{r}


summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Partial 3", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_partial_1$Angiosperms),sum(conserved_partial_3$Conserved), sum(gymnos_partial_1$Gymnosperms))
  ))  

```


*Partial sets 4*

```{r}

# Now we allow 2/3 pairs for clades, but still require pure clades.


# For the conserved groups we allow 1) 2/3 for clades, and 2) 5/9 for between pairs.

conserved_partial_4 <- df_with_sums %>% 
  filter(Angiosperms >= 2) %>% 
  filter(Gymnosperms >= 2) %>% 
  filter(Between >=5)

conserved_partial_4$Conserved[conserved_partial_4$Conserved < 9] <- 0 # 1->9 are changed to 0.
conserved_partial_4$Conserved[conserved_partial_4$Conserved >= 9] <- 1 # 9 is changed to 1.


```



```{r}



summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Partial 4", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_partial_1$Angiosperms),sum(conserved_partial_4$Conserved), sum(gymnos_partial_1$Gymnosperms))
  ))  



```

*Mixed set 1*

```{r}

# We allow 2/3 pairs for clades, AND 1/9 between when defining the clades.

angios_mixed_1 <- df_with_sums %>% 
  filter(Between <= 1) %>% 
  filter(Gymnosperms == 0) 

angios_mixed_1$Angiosperms[angios_mixed_1$Angiosperms < 2] <- 0 # 1 and 2 are changed to 0.
angios_mixed_1$Angiosperms[angios_mixed_1$Angiosperms >= 2] <- 1 # over 2 is changed to 1.

gymnos_mixed_1 <- df_with_sums %>% 
  filter(Between <= 1) %>% 
  filter(Angiosperms == 0) 

gymnos_mixed_1$Gymnosperms[gymnos_mixed_1$Gymnosperms < 2] <- 0 # 1 and 2 are changed to 0.
gymnos_mixed_1$Gymnosperms[gymnos_mixed_1$Gymnosperms >= 2] <- 1 # over 2 is changed to 1.


# For the conserved groups we allow 1) 2/3 for clades, and 2) 5/9 for between pairs.

conserved_partial_4 <- df_with_sums %>% 
  filter(Angiosperms >= 2) %>% 
  filter(Gymnosperms >= 2) %>% 
  filter(Between >=5)

conserved_partial_4$Conserved[conserved_partial_4$Conserved < 9] <- 0 # 1->9 are changed to 0.
conserved_partial_4$Conserved[conserved_partial_4$Conserved >= 9] <- 1 # 9 is changed to 1.


```



```{r}



summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Mixed 1", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_mixed_1$Angiosperms),sum(conserved_partial_4$Conserved), sum(gymnos_mixed_1$Gymnosperms))
  ))  



```

*Mixed set 2*

```{r}

# We require 3/3 pairs for clades, AND 1/9 between when defining the clades.

angios_mixed_2 <- df_with_sums %>% 
  filter(Between <= 1) %>% 
  filter(Gymnosperms == 0) 

angios_mixed_2$Angiosperms[angios_mixed_2$Angiosperms < 3] <- 0 # 1 and 2 are changed to 0.
angios_mixed_2$Angiosperms[angios_mixed_2$Angiosperms >= 3] <- 1 # over 2 is changed to 1.

gymnos_mixed_2 <- df_with_sums %>% 
  filter(Between <= 1) %>% 
  filter(Angiosperms == 0) 

gymnos_mixed_2$Gymnosperms[gymnos_mixed_2$Gymnosperms < 3] <- 0 # 1 and 2 are changed to 0.
gymnos_mixed_2$Gymnosperms[gymnos_mixed_2$Gymnosperms >= 3] <- 1 # over 2 is changed to 1.


# For the conserved groups we allow 1) 2/3 for clades, and 2) 5/9 for between pairs.

conserved_partial_4 <- df_with_sums %>% 
  filter(Angiosperms >= 3) %>% 
  filter(Gymnosperms >= 3) %>% 
  filter(Between >=5)

conserved_partial_4$Conserved[conserved_partial_4$Conserved < 11] <- 0 # 1->9 are changed to 0.
conserved_partial_4$Conserved[conserved_partial_4$Conserved >= 11] <- 1 # 9 is changed to 1.


```



```{r}



summary_df <- rbind(summary_df, data.frame(
  Definition = rep("Mixed 2", 3),
  Group = c(names(angios_strict)[16],names(conserved_strict)[19],names(gymnos_strict)[18]),
  Counts = c(sum(angios_mixed_2$Angiosperms),sum(conserved_partial_4$Conserved), sum(gymnos_mixed_2$Gymnosperms))
  ))  



```


**Overview**
<br>
The upset plot above gives an overview over the number of genes conserved in the different combinations of species pairs as well as the individual pairs themselves. Apart form the first 6-7 combinations, it is difficult to drawn any conclusions from what we see in the remaining combinations (only the 50 highest are shown). We can easily see the number of genes conserved for the 2 clades, gymnosperms and angiosperms, as well as the number of genes conserved between the clades, but this is based on a very strict definition of what a conserved gene is. A gene is only conserved between the clades if all pairs contain this gene (an ortholog), and a gene is only considered conserved within a clade if it is present in all 3 pairs within the clade. However, the genes found in the various gene pairs will be based on the quality of the genome the different species have been mapped to, etc. 
By relaxing this strict definition of a conserved gene we can observe how many more genes are included based on alternative interactions (rephrase...). The bar plots below summarize the number of genes conserved based on different definitions we set of for the 3 groups: angiosperms, gymnosperms and conserved (conserved between the clades).
<br>

The table below gives an overview of the parameters used. For the strict definition, a gene will be classified as conserved within a clade if 3/3 pairs contain this gene and if 9/9 of all the clade-mixed pairs contain this gene. The gene is therefore conserved between the clades if it is present in all species pairs - giving the gene a conserved "score" of 15/15. For the partial-definitions we allow some slack both. In partial 1 and 2, when classifying a gene as conserved or not, it is still required that a gene be present in 3/3 species for each clade, but we do not require a complete set of clade-mixed pairs. For partial 3 and 4 we allow even more slack as only 2/3 pairs within clades need to share the gene. These variation give different conservation scores for defining if a gene is conserved in both groups or not, based on some requirements. When counting genes conserved only within a clade, the same settings (3/3 or 2/3) as for the conserved group are used, but we do not include any mixed-species pairs to be included. The last definitions, mixed 1 and 2, allows the clade-specific genes to be considered conserved if it is found in either 3/3 or 2/3 pairs, but also if it occurs in one of the mixed pairs.

<br>

```{r}

definitions_overview <- data.frame(
  Definitions = c("Strict", "Partial 1", "Partial 2", "Partial 3", "Partial 4", "Mixed 1", "Mixed 2"),
  Clades = c("3/3", "3/3", "3/3" ,"2/3", "2/3", "2/3 + 1/9",  "3/3 + 1/9"),
  Between = c("9/9", "2/9", "5/9", "2/9" ,"5/9","5/9", "5/9"),
  Conserved_score = c("15/15", "8/15", "11/15", "6/15", "9/15","9/15", "11/15")
)

formattable(definitions_overview)

```

<br>
<br>

**Plot**


```{r fig.dim = c(15, 15)}

palette_1 <- c("#e66101", "#fdb863","#7625F7")
width_1 <- 0.5


facet_plot <- ggplot( summary_df , aes(x= Counts, y=Group, fill = Group)) + 
  geom_bar(stat = "identity", width = width_1) + 
 
  geom_text(aes(label = Counts), hjust= -0.3, size = 4, fontface = 2) + 
  scale_fill_manual(values = palette_1)  + 
  theme_minimal()+
  theme(legend.position = "bottom", axis.text.y = element_blank(), axis.ticks.y = element_blank(), panel.background = element_rect(fill = "cornsilk"), plot.background = element_rect(fill = "white")) +
  facet_wrap(~factor(Definition, levels = c("Strict", "Partial 1", "Partial 2", "Partial 3", "Partial 4", "Mixed 1", "Mixed 2")) , dir="h")  + labs(x = "", y = "") + ggtitle("Number of conserved genes per group based on definitions") + xlim(0,1500)

facet_plot

```


**Comments to plot**

*How does allowing genes to be present in only 2/3 pairs affect the clades? Also, what happens if we allow one mixed pair to be joined to the clades?*
By allowing only 2/3 pairs to contain a gene for the gymnosperms leads to 343 more genes being included, approximately a 50% increase in conserved genes. This is likely due to the high number of shared genes between the pines (Lodge and Scots) whose RNA reads were mapped to the same genome. For the angiosperms there is a higher relative increased of 62% as the number of genes increases from 219 to 355 genes. This increase might be a result of the species within angiosperms not being that closely related, phylogenetically. By allowing 2/3 we see a steep increase in number of genes as more mixed pairs are included (not shown here). By comparing mixed 1 and 2, we see that the increase is not as steep from the strict definition.

*Comment on which definition captures most genes between the clades.*
In general, the slacker definitions, the more genes are captured. Comparing partial 1 and 3, we see that more flexibility on the requirements for clade-conserved genes gives an increase of almost 68%. We also see this between partial 1 and 2 where we have increased the number of mixed pairs to express the gene. In this case, the increase from allowing 5/9 to only 2/9 pairs is around 6%.

*Should the clades be treated equally? *
As mentioned above, two of the gymnosperms are mapped to the same genome, so one could argue that being more strict and requiring a gene to have a 3/3 score in gymnosperms would perhaps account for this.


# Gene tables


## Genes conserved in all species (all pairs)


```{r file names}


species_list <- c("Lodge", "Asp", "Nor","Scots","Birch","Cher")
#"Asp", "Nor", ,  "Cher"
combo <- data.frame(t(combn(species_list, 2)))

# List of file names.

file_list_1 <- c()
for (i in 1:nrow(combo)){
  
  s1 <- combo[i, "X1"]
  s2 <- combo[i, "X2"]
  
  file_name <- paste0("Data/DATA/comparisonFiles/comparison-",s1,"_",s2,"-pearsonMR0.03no-table.RData")
  file_list_1 <- append(file_list_1, file_name, after = length(file_list_1))
    
}

conserved_genes <- conserved_strict %>% 
  filter(Conserved == 1)
rows_strict <- rownames(conserved_genes)


```



```{r}

cons_genes_all_species <- data.frame(
  OrthologGroup = c(),
  Species1 = c(),
  GeneSpecies1 = c(),
  Species2 = c(),
  GeneSpecies2 = c(),
  MaxPVal = c()
  
)

# Each pairs comparison table is filtered to only contain orthologs from the strict definition of "conserved in all species" (see further up). These genes are 1) expressed, 2) significant (max.p.val < 0.05), and 3) present in all pairs.

for (x in file_list_1){
  if(file.exists(x)){
    load(x)
    
    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1) 
    
    conserved <- comparison_table %>% 
      filter(OrthoGroup %in% rows_strict) %>% 
      group_by(OrthoGroup) %>% 
      slice(1) %>% 
      mutate_at("Max.p.val", as.numeric) %>% 
      ungroup()
    
    cons_genes_all_species <- rbind(cons_genes_all_species, data.frame(
      OrthologGroup = conserved$OrthoGroup,
      Species1 = rep(key_word_s1, nrow(conserved)),
      GeneSpecies1 = conserved$Species1,
      Species2 = rep(key_word_s2, nrow(conserved)),
      GeneSpecies2 = conserved$Species2,
      MaxPVal =  conserved$Max.p.val
      
    )) 
    
  }
}


```



```{r}
# Create interactive table

datatable(cons_genes_all_species, rownames = F, filter = "top",options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all"))
            ))

```


## Genes conserved in gymnosperms


```{r }


gymno_list <- c("Lodge", "Nor","Scots")

combo_gymno <- data.frame(t(combn(gymno_list, 2)))

# List of file names.

file_list_gymno<- c()
for (i in 1:nrow(combo_gymno)){
  
  s1 <- combo_gymno[i, "X1"]
  s2 <- combo_gymno[i, "X2"]
  
  file_name <- paste0("Data/DATA/comparisonFiles/comparison-",s1,"_",s2,"-pearsonMR0.03no-table.RData")
  file_list_gymno <- append(file_list_gymno, file_name, after = length(file_list_gymno))
    
}

conserved_genes_gymno <- gymnos_strict %>% 
  filter(Conserved == 3)
rows_strict <- rownames(conserved_genes_gymno)


```




```{r}

cons_genes_gymnosperms <- data.frame(
  OrthologGroup = c(),
  Species1 = c(),
  GeneSpecies1 = c(),
  Species2 = c(),
  GeneSpecies2 = c(),
  MaxPVal = c()
  
)

# Each pairs comparison table is filtered to only contain orthologs from the strict definition of "conserved in all species" (see further up). These genes are 1) expressed, 2) significant (max.p.val < 0.05), and 3) present in all pairs.

for (x in file_list_gymno){
  if(file.exists(x)){
    load(x)
    
    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1) 
    
    conserved <- comparison_table %>% 
      filter(OrthoGroup %in% rows_strict) %>% 
      group_by(OrthoGroup) %>% 
      slice(1) %>% 
      mutate_at("Max.p.val", as.numeric) %>% 
      ungroup()
    
    cons_genes_gymnosperms <- rbind(cons_genes_gymnosperms, data.frame(
      OrthologGroup = conserved$OrthoGroup,
      Species1 = rep(key_word_s1, nrow(conserved)),
      GeneSpecies1 = conserved$Species1,
      Species2 = rep(key_word_s2, nrow(conserved)),
      GeneSpecies2 = conserved$Species2,
      MaxPVal =  conserved$Max.p.val
      
    )) 
    
  }
}


```



```{r}
# Create interactive table

datatable(cons_genes_gymnosperms, rownames = F, filter = "top",options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all"))
            ))

```


## Genes conserved in angiosperms


```{r }


angio_list <- c("Asp", "Birch","Cher")

combo_angio <- data.frame(t(combn(angio_list, 2)))

# List of file names.

file_list_angio <- c()
for (i in 1:nrow(combo_angio)){
  
  s1 <- combo_angio[i, "X1"]
  s2 <- combo_angio[i, "X2"]
  
  file_name <- paste0("Data/DATA/comparisonFiles/comparison-",s1,"_",s2,"-pearsonMR0.03no-table.RData")
  file_list_angio<- append(file_list_angio, file_name, after = length(file_list_angio))
    
}

conserved_genes_angio <- angios_strict %>% 
  filter(Conserved == 3)
rows_strict <- rownames(conserved_genes_angio)


```




```{r}

cons_genes_angiosperms <- data.frame(
  OrthologGroup = c(),
  Species1 = c(),
  GeneSpecies1 = c(),
  Species2 = c(),
  GeneSpecies2 = c(),
  MaxPVal = c()
  
)

# Each pairs comparison table is filtered to only contain orthologs from the strict definition of "conserved in all species" (see further up). These genes are 1) expressed, 2) significant (max.p.val < 0.05), and 3) present in all pairs.

for (x in file_list_angio){
  if(file.exists(x)){
    load(x)
    
    key_word_s1 <- sapply(strsplit(x, "_"), "[",1) 
    key_word_s1 <- sapply(strsplit(key_word_s1, "-"), "[",2) 
    key_word_s2 <- sapply(strsplit(x, "_"), "[",2)
    key_word_s2 <- sapply(strsplit(key_word_s2, "-"), "[",1) 
    
    conserved <- comparison_table %>% 
      filter(OrthoGroup %in% rows_strict) %>% 
      group_by(OrthoGroup) %>% 
      slice(1) %>% 
      mutate_at("Max.p.val", as.numeric) %>% 
      ungroup()
    
    cons_genes_angiosperms <- rbind(cons_genes_angiosperms, data.frame(
      OrthologGroup = conserved$OrthoGroup,
      Species1 = rep(key_word_s1, nrow(conserved)),
      GeneSpecies1 = conserved$Species1,
      Species2 = rep(key_word_s2, nrow(conserved)),
      GeneSpecies2 = conserved$Species2,
      MaxPVal =  conserved$Max.p.val
      
    )) 
    
  }
}


```



```{r}
# Create interactive table

datatable(cons_genes_angiosperms, rownames = F, filter = "top",options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all"))
            ))

```


































