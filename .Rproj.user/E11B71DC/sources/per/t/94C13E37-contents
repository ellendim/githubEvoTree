---
title: "GO enrichment"
author: "Ellen Dimmen Chapple"
date: '`r format(Sys.time(), "%d.%m.%Y")`'
output: 
  html_document:
    code_folding: hide
    toc: true
    number_sections: true
    toc_float: true
    theme: lumen
editor_options:
  chunk_output_type: console
---



```{r message=FALSE, warning=FALSE}

library(tidyverse)
library(GSEABase)
library(GOstats)
library(gdata)

```

## Gene ontology

- N, all expressed genes
- n, all expressed and annotated genes
- k, set of conserved genes
- x, genes that are conserved and annotated

```{r}

# Expressed genes
expressed_genes <- read_delim("Data/DATA/transcriptomicsData/AspWood_transcriptomics.txt")

# Expressed genes with GO-tags 
go_list <- read_delim("Data/DATA/Potra22_blast2go_GO.txt",'\t') %>%
    separate(`Sequence Name`,into = c("Sequence Name","Sequence Variant"), sep = "\\.") %>%
    separate(`Annotation GO ID-Annotation GO Term`,into = c("GO ID","GO Term"), sep = "-", extra = "drop") %>%
    filter(`Sequence Name` %in% expressed_genes$Genes)

go_data_frame <- data.frame(go_id=go_list$`GO ID`, evidence=rep("ND", nrow(go_list)), 
                          gene_id=go_list$`Sequence Name`)
go_frame_object=GOFrame(go_data_frame,organism="Aspen")
go_all_frame_object=GOAllFrame(go_frame_object)

# Aspen genes from ortholog groups conserved in all species (strict) - includes all gene variants for each ortholog groups.

cat("Number of expressed genes: ", length(unique(expressed_genes$Genes)))
cat("Number of expressed genes with at least 1 GO-term: ", length(unique(go_list$`Sequence Name`)))
cat("Number of GO-terms : ", length(unique(go_list$`GO Term`)))

# Parameters
gene_set_collection <- GeneSetCollection(go_all_frame_object, setType = GOCollection())
universe <- expressed_genes$Genes

list <- c("Data/DATA/textFiles/cons_genes_aspen.txt", "Data/DATA/textFiles/gymnosperms_genes_aspen.txt", "Data/DATA/textFiles/angiosperms_genes_aspen.txt")


pval_cutoff <- 0.05
for (i in 1:length(list)){
  

  gene_set <- read_delim(list[i], "\t")
  gene_ID <- gene_set$Asp
  
  group_name <- sapply(strsplit(list[i], "textFiles/"), "[", 2)
  group_name <- sapply(strsplit(group_name, "_genes"), "[", 1)
  
  params <- GSEAGOHyperGParams(name="My Custom GSEA based annot Params",
                               geneSetCollection = gene_set_collection,
                               geneIds = gene_ID,
                               universeGeneIds = universe, 
                               ontology = "BP",
                               pvalueCutoff = pval_cutoff,
                               conditional = FALSE,
                               testDirection = "over")
  
  hyper_g_test <- hyperGTest(params)
  summary_table <- summary(hyper_g_test)
  summary_table <- summary_table[summary_table$Count>1,]
  summary_table <- summary_table[,c(1,2,5,6,7)]
  colnames(summary_table) <- c("GO id","P-value","x","n","GO term")
  
  rownames(summary_table) <- 1:nrow(summary_table)
  
  summary_table$`P-value`<- format(summary_table$`P-value`, digits=3, scientific=TRUE)
  
  # Rename the summary table!
  
    new_name <- as.character(paste0("summary_table_", group_name, "_", pval_cutoff))
    mv("summary_table", new_name) 
    
  
}


```



```{r}


wood_formation_terms <- c("wall", "lignin", "lignification","apoptosis", "apoptoptic" ,"expansion", "death", "cellulose", "xylem", "phloem", "ribosom")

summary_table_cons_keywords <- data.frame(

)

for (i in 1:length(wood_formation_terms)){
  
  word <- wood_formation_terms[i]
  df <- summary_table_cons_0.05 %>% 
    filter(grepl(word, `GO term`))
  
  if(nrow(df)>=1){
    df <- df %>% 
    mutate(key_word = word)
    
  summary_table_cons_keywords <- rbind(summary_table_cons_keywords, data.frame(df)) %>% 
    arrange(`key_word`)
  
  }
  
  
}


view(summary_table_cons_keywords)

```




