---
title: "Heatmaps - conserved genes"
author: "Ellen Dimmen Chapple"
date: "`r Sys.Date()`"
output: 
  html_document:
    code_folding: hide
    toc: true
    number_sections: true
    toc_float: true
    theme: lumen
editor_options:
  chunk_output_type: console
---

```{r libraries, message=FALSE, warning=FALSE}

library(tidyverse)
library(ComplexHeatmap)
library(gplots)
library(cowplot)
library(circlize)

```

1. Read the expression-file
2. Read in file for the conserved genes - cons_genes_all_species.
3. Filter out genes in expression files that are not conserved. 

5. For the heatmaps: cluster the genes, while keeping the samples in the same order. Plot.

# Conserved genes - heatmap

1) Load files



```{r}


species_list <- c("Cher", "Asp", "Birch","Nor", "Scots", "Lodge") 
# Change this based on which set that is to be used: "Cher", "Asp", "Birch", "Nor", "Scots", "Lodge"


# CONSERVED AND CO-EXPRESSED GENES - p-value cutoff at 0.05

conserved_genes <- read.delim("Data/DATA/textFiles/cons_genes_all_species.txt", header = TRUE, sep = " ") %>% 
  filter(MaxPVal < 0.05) #(OBS! Check p in: MaxPVal)

# CONSERVED: cons_genes_all_species.txt 
# ANGIOSPERM-SPECIFIC: cons_genes_angiosperms.txt 
# GYMNOSPERM-SPECIFIC: cons_genes_gymnosperms.txt 




ortholog_group_file <- read.delim("Data/DATA/Orthogroups.100323.tsv", header = TRUE, sep = "\t") %>% 
  mutate(Pinsyl.SHORT.cp.pep = Pinsyl.SHORT.pep) %>% 
  rename(
    Asp = Poptre.SHORT.pep,
    Birch = Betpen.SHORT.pep,
    Nor = Picabi.SHORT.pep,
    Scots = Pinsyl.SHORT.pep,
    Cher = Prunavi.SHORT.pep,
    Lodge = Pinsyl.SHORT.cp.pep,
    OrthoGroup = Orthogroup) %>% 
  mutate(Asp = gsub("Poptre_", "", Asp)) %>%
  mutate(Asp = gsub("\\.\\d\\.p\\d$", "", Asp)) %>% 
  mutate(Birch = gsub("Betpen_", "", Birch)) %>%
  mutate(Cher = gsub("Prunavi_", "", Cher)) %>%
  mutate(Nor = gsub("\\.p\\d$", "", Nor)) %>%
  mutate(Cher = gsub("\\.p\\d$", "", Cher))


```





```{r}

# Create 2 separate columns of only aspen genes, then put them together to create one long column. Then remove the duplicated genes.

all_co_ex_genes <- conserved_genes %>% 
  select(GeneSpecies1, GeneSpecies2)

gene_vector <- data.frame(genes = unlist(all_co_ex_genes, use.names = FALSE))

gene_vector <- gene_vector %>% 
  distinct(genes, .keep_all = T)


```



```{r message=FALSE, warning=FALSE}



file_list_2 <- c()
for (i in species_list){
  
  expr_name <- paste0("Data/DATA/transcriptomicsData/transcriptomicsForHeatmaps/",i,"Wood_transcriptomics_hm.txt")
  file_list_2 <- append(file_list_2, expr_name, after = length(file_list_2))
  
}

# Legend for heatmap
col_function_1 <- colorRamp2(c(-3, 0 ,3), c("#0571b0", "#f7f7f7","#ca0020" ))
lgd_1 = Legend(col_fun = col_function_1, title = "Z-value?", title_gp = gpar(fontsize = 20) , legend_height = unit(12, "cm"), grid_width = unit(1, "cm"), labels_gp = gpar(fontsize = 20),at = c(-3, 0 ,3), title_gap =  unit(0.5, "cm"))

# Loop

for (i in 1:length(file_list_2)){

  
  x <- read_delim(file_list_2[i], show_col_types = FALSE)
  

  
  
  species <- sapply(strsplit(file_list_2[i], "transcriptomicsData/transcriptomicsForHeatmaps/"), "[",2)
  species <- sapply(strsplit(species, "Wood"), "[", 1)
  
# 
  OG <- ortholog_group_file %>%
    rename(Genes = species) %>%
    select(OrthoGroup, Genes) %>%
    separate_rows(Genes, sep = ", ") %>%
    filter(OrthoGroup %in% conserved_genes$OrthologGroup) %>%
    filter(Genes %in% gene_vector$genes) %>% 
    group_by(OrthoGroup) %>% 
    slice(1)


  # #
  # # Then we want only the expressed genes that are in the ortholog group file.
  #  expr_genes <- x %>%
  #   filter(Genes %in% rearranged$Genes) %>%
  #   data.frame()
  # #
  # #
  # expr_genes$Genes <- rearranged$Genes
  
  # Number of genes that are expressed and conserved for a species will vary depending on the number of genes a species has per ortholog group.
  expressed_and_conserved_genes <- x %>% 
    filter(Genes %in% OG$Genes) %>% 
    column_to_rownames("Genes") %>%
    select(contains("1.")) %>% 
    as.matrix()
  
  print(cat(species, ": ", nrow(expressed_and_conserved_genes), " genes."))
  distance_matrix <- dist(expressed_and_conserved_genes, method = "euclidean")
  
  scaled_data <- t(scale(t(expressed_and_conserved_genes), center = T, scale = T)) 
  

  scaled_data[is.nan(scaled_data)] <-0 #Lodge had a few rows with NaNs which became an issue when running Lodge on the clade-specific genes.



  
  hm <-  Heatmap(scaled_data ,show_column_names = TRUE,
                 cluster_rows = TRUE,
                 show_row_dend = FALSE,
                 column_title = species,
                 column_title_gp = gpar(fontsize = 40),
                 clustering_distance_rows = "euclidean",
                 clustering_method_rows = "ward.D2",
                 show_row_names = FALSE,
                 width = ncol(scaled_data)*unit(5, "mm"),
                 height = nrow(scaled_data)*unit(1, "mm"),
                 column_order = 1:ncol(scaled_data),
                 show_heatmap_legend = F,
                 col = col_function_1
                 )
  # colorR <- colorRampPalette(c("blue","white","red"))(20)
  # 
  # hm <- heatmap.2(as.matrix(scaled_data),
  #                 Colv = FALSE,
  #                 Rowv = dend_genes,
  #                 scale = "row",
  #                 labRow = rep("", nrow(scaled_data)),
  #                 dendrogram = "none",
  #                 margins = c(5, 5), 
  #                 trace = "none",
  #                 cexRow = 0.4,
  #                 cexCol = 0.8,
  #                 main = species,
  #                 col = colorR
  # )
  
    
    
  new_name <- as.character(paste0("hm_",species))
  gdata::mv("hm", new_name) 
  

  
}

  row_order_asp <- row_order(hm_Asp)
  row_order_cher <- row_order(hm_Cher)
  row_order_birch <- row_order(hm_Birch)
  row_order_nor <- row_order(hm_Nor)
  row_order_scots <- row_order(hm_Scots)
  row_order_lodge <- row_order(hm_Lodge)

```





```{r}

# ALTER BASED ON WHICH GROUPS ARE PLOTTED
lgd_1_grob <- grid.grabExpr(draw(lgd_1))
g1 <- grid.grabExpr(print(`hm_Asp`))
g2 <- grid.grabExpr(print(`hm_Cher`))
g3 <- grid.grabExpr(print(`hm_Birch`))
g4 <- grid.grabExpr(print(`hm_Nor`))
g5 <- grid.grabExpr(print(`hm_Scots`))
g6 <- grid.grabExpr(print(`hm_Lodge`))


```

```{r fig.dim = c(40,20)}
# 
grid_plot_conserved <-plot_grid(g1,g2,g3,g4,g6,g5,lgd_1_grob, nrow = 1, ncol = 7, rel_widths = c(1,1,1,1,1,1, 1), rel_heights = c(0.5, 0.5, 0.5, 1,1,1,1))

grid_plot_conserved


# 
# grid_plot_angiosperms <-plot_grid(g1,g2, g3, lgd_1_grob, nrow = 1, ncol = 4)
# grid_plot_angiosperms

```




```{r fig.dim = c(40,20)}
# 
# grid_plot_gymnosperms <-plot_grid(g4,g5, g6, lgd_1_grob, nrow = 1, ncol = 4)
# grid_plot_gymnosperms

```


# Expression profiles based on heatmaps - extracting the genes based on row order


After a heatmap is created, we can look for cluster that seem interesting and identify (roughly) where in the row order the gene cluster is. Plot the profile of a group of these genes.

If we start by looking at the heatmap of aspen. 
We can start with some of the last genes which seem to be up-regulated in the first 9-10 samples before being down-regulated for most of the remaining samples. For the last 2-3 samples there is an increased expression again.



```{r}

length(row_order_asp)
asp_expr <- read_delim(file_list_2[2], show_col_types = FALSE) 

cluster <- asp_expr[row_order_asp[110:125],]

# Check if genes are annotated - if few/none are, then plot anyway.
load("Data/DATA/actual_GO_terms.R")

cluster_annot <- cluster %>% 
  filter(Genes %in% actual_GO_terms$`Sequence Name`)


```


```{r}

cluster <- cluster %>% 
  column_to_rownames("Genes") %>% 
  select(contains("1."))

```




## Plotting 

```{r}



plots <- list()
species <- "Asp"

samples <- colnames(cluster)
expression_vector_t <- t(cluster) 


  

expression_vector_t <- expression_vector_t %>% 
  as.data.frame() %>%
  mutate(Samples = samples) 


longer <- expression_vector_t %>% 
  pivot_longer(-Samples, names_to = "Genes", values_to = "Expression") %>% 
  mutate_at("Expression", as.numeric) %>% 
  mutate(Samples = gsub("^(.+?).", "", Samples)) 
  


```




```{r}
genes_to_plot <- c(unique(longer$Genes))
plots <- list()

for(i in 1:length(genes_to_plot)){
  gene <- genes_to_plot[i]
  df <- longer %>% 
    filter(Genes == gene)
  
  plots[[length(plots)+1]]  <- ggplot(data = df, aes(x = Samples, y = Expression, group = Genes)) +
    geom_line(linewidth = 2) +
    ggtitle(gene) + ylab("Expression ")
  
  
  
}

plot_grid(plotlist = plots, ncol = 2)
```































